Step 1: Set up Flask and SQLAlchemy
First, ensure you have the necessary packages installed:


pip install Flask SQLAlchemy requests
Next, create a Flask app and set up SQLAlchemy:

from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
import requests
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///products.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)


Step 2: Create Database Models
Define your database models based on the structure of the JSON data:
class ProductTransaction(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(255))
    description = db.Column(db.String(255))
    price = db.Column(db.Float)
    category = db.Column(db.String(255))
    dateOfSale = db.Column(db.String(255))
    sold = db.Column(db.Boolean)

    def __init__(self, title, description, price, category, dateOfSale, sold):
        self.title = title
        self.description = description
        self.price = price
        self.category = category
        self.dateOfSale = dateOfSale
        self.sold = sold

db.create_all()


Step 3: Fetch and Seed Data
Create a route to fetch data from the third-party API and seed it into the database:

@app.route('/initialize', methods=['GET'])
def initialize_database():
    response = requests.get('https://s3.amazonaws.com/roxiler.com/product_transaction.json')
    data = response.json()
    
    for item in data:
        transaction = ProductTransaction(
            title=item['title'],
            description=item['description'],
            price=item['price'],
            category=item['category'],
            dateOfSale=item['dateOfSale'],
            sold=item['sold']
        )
        db.session.add(transaction)
    
    db.session.commit()
    return 'Database initialized with seed data!', 200


Step 4: Create the Required APIs
1. API to list all transactions with search and pagination

@app.route('/transactions', methods=['GET'])
def list_transactions():
    month = request.args.get('month')
    search = request.args.get('search', '')
    page = int(request.args.get('page', 1))
    per_page = int(request.args.get('per_page', 10))
    
    query = ProductTransaction.query.filter(ProductTransaction.dateOfSale.like(f'%{month}%'))
    
    if search:
        query = query.filter((ProductTransaction.title.ilike(f'%{search}%')) |
                             (ProductTransaction.description.ilike(f'%{search}%')) |
                             (ProductTransaction.price.ilike(f'%{search}%')))
    
    transactions = query.paginate(page, per_page, False).items
    result = [t.__dict__ for t in transactions]
    for r in result:
        r.pop('_sa_instance_state')
    
    return jsonify(result)


2. API for statistics

@app.route('/statistics', methods=['GET'])
def get_statistics():
    month = request.args.get('month')
    
    total_sales = db.session.query(db.func.sum(ProductTransaction.price)).filter(
        ProductTransaction.dateOfSale.like(f'%{month}%'), ProductTransaction.sold == True).scalar()
    sold_items = db.session.query(db.func.count(ProductTransaction.id)).filter(
        ProductTransaction.dateOfSale.like(f'%{month}%'), ProductTransaction.sold == True).scalar()
    not_sold_items = db.session.query(db.func.count(ProductTransaction.id)).filter(
        ProductTransaction.dateOfSale.like(f'%{month}%'), ProductTransaction.sold == False).scalar()
    
    return jsonify({
        'total_sales': total_sales,
        'sold_items': sold_items,
        'not_sold_items': not_sold_items
    })


3. API for bar chart data

@app.route('/barchart', methods=['GET'])
def get_bar_chart():
    month = request.args.get('month')
    
    ranges = [(0, 100), (101, 200), (201, 300), (301, 400), (401, 500), 
              (501, 600), (601, 700), (701, 800), (801, 900), (901, float('inf'))]
    result = {}
    
    for r in ranges:
        count = db.session.query(db.func.count(ProductTransaction.id)).filter(
            ProductTransaction.dateOfSale.like(f'%{month}%'),
            ProductTransaction.price >= r[0],
            ProductTransaction.price <= r[1]
        ).scalar()
        result[f'{r[0]}-{r[1] if r[1] != float("inf") else "above"}'] = count
    
    return jsonify(result)


4. API for pie chart data

@app.route('/piechart', methods=['GET'])
def get_pie_chart():
    month = request.args.get('month')
    
    categories = db.session.query(ProductTransaction.category, db.func.count(ProductTransaction.id)).filter(
        ProductTransaction.dateOfSale.like(f'%{month}%')
    ).group_by(ProductTransaction.category).all()
    
    result = {category: count for category, count in categories}
    return jsonify(result)


5. API to combine all responses

@app.route('/combined', methods=['GET'])
def get_combined():
    transactions_response = list_transactions().get_json()
    statistics_response = get_statistics().get_json()
    barchart_response = get_bar_chart().get_json()
    piechart_response = get_pie_chart().get_json()
    
    combined_response = {
        'transactions': transactions_response,
        'statistics': statistics_response,
        'bar_chart': barchart_response,
        'pie_chart': piechart_response
    }
    
    return jsonify(combined_response)


if __name__ == '__main__':
    app.run(debug=True)